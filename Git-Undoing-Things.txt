In this file, we will discuss different ways that we can use in git to undo work that we had done while working on our project.

1) the command "git show HEAD": 
this command allows us to see our last commit that we had made.

2) the command "git show <id of the commit>":
it allows us to see a specific commit which is according to the id that we had entered.
note: we can view the id of each commit when using the history command "git log" or "git log --oneline".

3) the command "git show HEAD~1":
this command let us see the last commit before the HEAD one.

=====================================================

4) the command "git checkout <file>":
this command let us unmodify the changes that had done on a specific file, if we want to unmodify all the changes in all files we use the following command:
"git checkout ."

5) the command "git checkout <id of the commit>":
this command let us go back in history to see the changes that were done during this commit only.
Note: this command is a -read only- command, it means that the data will never be affected, it only get back in time to view some changes without changing any thing in our work(READ ONLY).

6) the command "git checkout master":
it returns us to the latest commit (HEAD), so will be able to view all the previous commits.

**** git checkout is a read only method ****

7) the command "git revert <id commit>":
this command deletes the changes that were made in the specified commit only.

8) the command "git reset --mixed<id>":
this command deletes the commits from the history, but the changes that were done on the file will still and will not be deleted.
Moreover, if we use after that "git status", we will find that the files will be unstaged(red colored).

9) the command "git reset --soft<id>":
this command deletes the commits from the history, but the changes that were done on the file will still and will not be deleted.
Moreover, if we use after that "git status", we will find that the files will still staged(green colored).

10) the command "git reset --hard<id>":
this command deletes the commits and changes from the history. Moreover, when using the "git status" command the files will not be obtained neither staged nor unstaged.

11) the ".gitignore" file:
every file included in the .gitignore file will be ignored from git commands.
for example, if we include a file named "script.js" in the .gitignore file, the script.js file will be ignored from all the git commands that we are using during our work.

======================================================
Conclusion:
In this section we had discussed the commands that we usually use to undo some work.
*git checkout
*git revert
*git reset (mixed, soft, and hard)

Let's go.